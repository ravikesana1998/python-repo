trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'pipeline-folder/*'
      - 'scripts/*'

pool:
  name: 'agent-pool'

variables:
  swaggerUrl: 'https://python-web-app-1-bgape3c8aqahgjcn.centralindia-01.azurewebsites.net/openapi.json'
  fullSwagger: 'swagger-full.json'
  outputDir: 'split_swagger'
  resourceGroup: '02-05-rg'
  apimName: 'python-swagger'
  subscriptionId: '361d2915-ae3c-4eda-a472-cd1a9f5a25a9'
  appBaseUrl: 'https://python-web-app-1-bgape3c8aqahgjcn.centralindia-01.azurewebsites.net'
  
  # API IDs for each method
  apiGet: 'users-get'
  apiPost: 'users-post'
  apiPatch: 'users-patch'
  apiDelete: 'users-delete'

steps:
- task: UsePythonVersion@0
  displayName: 'Set up Python 3.9'
  inputs:
    versionSpec: '3.9'
    addToPath: true

- script: |
    python -m pip install --upgrade pip
    pip install azure-cli azure-mgmt-apimanagement
  displayName: 'Install Azure CLI and dependencies'

- script: |
    echo "Downloading and validating Swagger spec from $(swaggerUrl)"
    curl -sSL $(swaggerUrl) -o $(fullSwagger)
    
    # Validate JSON syntax
    python -c "import json; json.load(open('$(fullSwagger)'))"
    
    echo "Downloaded Swagger file content:"
    cat $(fullSwagger) | jq . | head -n 30
  displayName: 'Download and Validate Swagger'

- script: |
    echo "Splitting Swagger by method with validation..."
    python scripts/split_swagger_by_method.py $(fullSwagger) --output-dir $(outputDir)
    
    echo "Validating split files:"
    for file in $(outputDir)/swagger-*.json; do
      echo "Validating $file"
      python -c "import json; json.load(open('$file'))"
      echo "Basic content:"
      cat $file | jq . | head -n 10
    done
  displayName: 'Split and Validate Swagger by Method'

- script: |
    echo "Splitting Swagger by method..."
    python3 -c "import json; json.load(open('$(fullSwagger)'))" && echo "Input file is valid JSON"
    python3 scripts/split_swagger_by_method.py $(fullSwagger) --output-dir $(outputDir)
    echo "Split files created:"
    ls -l $(outputDir)
    echo "Validating output files:"
    for file in $(outputDir)/*.json; do
      python3 -c "import json; json.load(open('$file'))" && echo "$file is valid JSON"
    done
  displayName: 'Split Swagger by Method'

- script: |
    echo "Azure CLI version:"
    az --version
    
    echo "Logging in with service principal..."
    az login --service-principal -u "$(servicePrincipalId)" -p "$(servicePrincipalKey)" --tenant "$(tenantId)"
    az account set --subscription $(subscriptionId)
  displayName: 'Azure Login'
  env:
    servicePrincipalId: $(servicePrincipalId)
    servicePrincipalKey: $(servicePrincipalKey)
    tenantId: $(tenantId)

# GET Operations
- script: |
    echo "Processing GET operations..."
    spec_file="$(outputDir)/swagger-get.json"
    
    # Validate spec file exists
    if [ ! -f "$spec_file" ]; then
      echo "##vso[task.logissue type=error]GET Swagger file not found at $spec_file"
      exit 1
    fi
    
    # First sync with APIM
    python scripts/sync_apim_operations.py \
      --subscription-id $(subscriptionId) \
      --resource-group $(resourceGroup) \
      --service-name $(apimName) \
      --spec-file $spec_file \
      --api-id $(apiGet)
  displayName: 'Sync GET Operations'

- task: AzureCLI@2
  displayName: 'Import GET API'
  inputs:
    azureSubscription: 'Azure Resource-service connectiom'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Importing GET API..."
      az apim api import \
        --resource-group $(resourceGroup) \
        --service-name $(apimName) \
        --path users-get \
        --api-id $(apiGet) \
        --specification-format OpenApiJson \
        --specification-path $(outputDir)/swagger-get.json \
        --service-url "$(appBaseUrl)" \
        --api-type http
      
      echo "GET API import completed with status $?"

# POST Operations
- script: |
    echo "Processing POST operations..."
    spec_file="$(outputDir)/swagger-post.json"
    
    if [ ! -f "$spec_file" ]; then
      echo "##vso[task.logissue type=error]POST Swagger file not found at $spec_file"
      exit 1
    fi
    
    python scripts/sync_apim_operations.py \
      --subscription-id $(subscriptionId) \
      --resource-group $(resourceGroup) \
      --service-name $(apimName) \
      --spec-file $spec_file \
      --api-id $(apiPost)
  displayName: 'Sync POST Operations'

- task: AzureCLI@2
  displayName: 'Import POST API'
  inputs:
    azureSubscription: 'Azure Resource-service connectiom'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Importing POST API..."
      az apim api import \
        --resource-group $(resourceGroup) \
        --service-name $(apimName) \
        --path users-post \
        --api-id $(apiPost) \
        --specification-format OpenApiJson \
        --specification-path $(outputDir)/swagger-post.json \
        --service-url "$(appBaseUrl)" \
        --api-type http
      
      echo "POST API import completed with status $?"

# PATCH Operations
- script: |
    echo "Processing PATCH operations..."
    spec_file="$(outputDir)/swagger-patch.json"
    
    if [ ! -f "$spec_file" ]; then
      echo "##vso[task.logissue type=warning]PATCH Swagger file not found at $spec_file"
      exit 0  # Continue if patch not available
    fi
    
    python scripts/sync_apim_operations.py \
      --subscription-id $(subscriptionId) \
      --resource-group $(resourceGroup) \
      --service-name $(apimName) \
      --spec-file $spec_file \
      --api-id $(apiPatch)
  displayName: 'Sync PATCH Operations'

- task: AzureCLI@2
  displayName: 'Import PATCH API'
  inputs:
    azureSubscription: 'Azure Resource-service connectiom'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      if [ -f "$(outputDir)/swagger-patch.json" ]; then
        echo "Importing PATCH API..."
        az apim api import \
          --resource-group $(resourceGroup) \
          --service-name $(apimName) \
          --path users-patch \
          --api-id $(apiPatch) \
          --specification-format OpenApiJson \
          --specification-path $(outputDir)/swagger-patch.json \
          --service-url "$(appBaseUrl)" \
          --api-type http
      else
        echo "No PATCH spec found, skipping"
      fi

# DELETE Operations
- script: |
    echo "Processing DELETE operations..."
    spec_file="$(outputDir)/swagger-delete.json"
    
    if [ ! -f "$spec_file" ]; then
      echo "##vso[task.logissue type=warning]DELETE Swagger file not found at $spec_file"
      exit 0  # Continue if delete not available
    fi
    
    python scripts/sync_apim_operations.py \
      --subscription-id $(subscriptionId) \
      --resource-group $(resourceGroup) \
      --service-name $(apimName) \
      --spec-file $spec_file \
      --api-id $(apiDelete)
  displayName: 'Sync DELETE Operations'

- task: AzureCLI@2
  displayName: 'Import DELETE API'
  inputs:
    azureSubscription: 'Azure Resource-service connectiom'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      if [ -f "$(outputDir)/swagger-delete.json" ]; then
        echo "Importing DELETE API..."
        az apim api import \
          --resource-group $(resourceGroup) \
          --service-name $(apimName) \
          --path users-delete \
          --api-id $(apiDelete) \
          --specification-format OpenApiJson \
          --specification-path $(outputDir)/swagger-delete.json \
          --service-url "$(appBaseUrl)" \
          --api-type http
      else
        echo "No DELETE spec found, skipping"
      fi

- script: |
    echo "Final API list in APIM:"
    az apim api list --resource-group $(resourceGroup) --service-name $(apimName) --output table
  displayName: 'Verify API Import'
